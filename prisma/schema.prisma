// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String
  fullName     String?
  profileUrl   String?
  houseAddress String?
  phoneNumber  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // Relations
  estateId     String?
  estate       Estate?  @relation(fields: [estateId], references: [id])

  // Add these fields:
  passwordResetToken     String? // hashed token for password reset
  resetTokenExpiresAt    BigInt? // store as timestamp (milliseconds since epoch)
  emailVerificationToken String? // hashed token for email verification
  verificationStatus     String  @default("UNVERIFIED") // status of user verification
  passwordResetOTP       String? // OTP for password reset
  verificationOTP        String? // OTP for email verification
  otpExpiresAt           BigInt? // store as timestamp (milliseconds since epoch)
  emailVerifiedAt        BigInt? // store as timestamp (milliseconds since epoch)

  Notification Notification[]

  Payment Payment[]

  AuditLog AuditLog[]

  role String @default("USER") // e.g., "USER", "ADMIN"
}

model Service {
  id   String @id @default(cuid())
  name String @unique

  description  String?
  price        Float
  billingCycle String // e.g., "monthly", "yearly"
  isActive     Boolean   @default(true)
  startDate    DateTime  @default(now())
  endDate      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  estateId String
  estate   Estate @relation(fields: [estateId], references: [id])

  Payment Payment[]
}

model Estate {
  id           String  @id @default(cuid())
  name         String
  address      String
  phone        String? // Contact phone number for the estate
  email        String? // Contact email for the estate
  supportEmail String?
  supportPhone String?

  apiKey    String? // API key for external integrations
  apiSecret String? // API secret for external integrations
  currency  String? // Currency used in the estate, e.g., "NGN", "USD"

  smsNotifications   Boolean  @default(false) // Whether SMS notifications are enabled
  emailNotifications Boolean  @default(false) // Whether email notifications are enabled
  paymentReminders   Boolean  @default(false) // Whether payment reminders are enabled
  reminderDays       Int      @default(7) // Number of days before due date to send reminders
  paymentGracePeriod Int      @default(3) // Grace period in days for payments
  users              User[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  PaymentGatewayConfig PaymentGatewayConfig[]

  Service Service[]

  EstateFeature EstateFeature[]

  EstateGallery EstateGallery[]

  EstateStreet EstateStreet[]
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String // e.g., "email", "sms", "push"
  content   String
  status    String // e.g., "sent", "failed", "pending"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  amount      Float
  status      String // e.g., "paid", "pending", "failed"
  paymentDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  PaymentTransaction PaymentTransaction[]
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String // e.g., "create", "update", "delete"
  entity    String // e.g., "User", "Service", "Estate"
  entityId  String // ID of the entity being audited
  details   String? // Additional details about the action
  createdAt DateTime @default(now())
}

model PaymentGatewayConfig {
  id       String @id @default(cuid())
  estateId String
  estate   Estate @relation(fields: [estateId], references: [id])

  provider  String // e.g., "Paystack", "Stripe", etc.
  currency  String // e.g., "NGN", "USD"
  apiKey    String
  secretKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentTransaction {
  id            String   @id @default(cuid())
  paymentId     String
  payment       Payment  @relation(fields: [paymentId], references: [id])
  transactionId String // Unique ID from the payment gateway
  status        String // e.g., "success", "failed", "pending"
  amount        Float
  currency      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model EstateFeature {
  id          String   @id @default(cuid())
  estateId    String
  estate      Estate   @relation(fields: [estateId], references: [id])
  featureName String // e.g., "Parking", "Gym", "Pool"
  description String?
  iconUrl     String? // URL of the icon representing the feature
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EstateGallery {
  id        String   @id @default(cuid())
  estateId  String
  estate    Estate   @relation(fields: [estateId], references: [id])
  imageUrl  String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EstateStreet {
  id         String   @id @default(cuid())
  estateId   String
  imageUrl   String // URL of the street image
  estate     Estate   @relation(fields: [estateId], references: [id])
  streetName String // Name of the street
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
